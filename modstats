#!/usr/bin/perl

=head1 Name

modstats - Generate SPM modeling summary report

=head1 Version

0.51

=head1 Prerequisites

B<PostgreSQL>

Required Perl modules:

=over

=item * boolean;

=item * Getopt::Long

=item * Pg;

=item * Text::CSV

=back

=head1 Synopsis

S<modstats --help >

S<modstats [--db=E<lt>database nameE<gt>] [--host=E<lt>hostnameE<gt>] \>
S<         [--user=E<lt>usernameE<gt>] [--password=E<lt>database passwordE<gt>] \>
S<         [--debug] [--dlm=E<lt>delimiterE<gt>] [--modtype=E<lt>model typesE<gt>] \>
S<         [--target=E<lt>target variableE<gt>] [--list-projects] \>
S<         [--list-groves] [--list-targets] [--perfstats=E<lt>performance stat fieldsE<gt>] \>
S<         [--sampleid=learn|test|holdout] [--project=E<lt>project nameE<gt>] \>
S<         [--grove=E<lt>grove nameE<gt>]  [--sortby=E<lt>field nameE<gt>] \>
S<         [--sessflds=E<lt>session setting fieldsE<gt>] [E<lt>output fileE<gt>] >

=head1 Options

=over

=item --help

Print this help

=item --db=<database name>

Specify the PostgreSQL database to use (default=F<spm>)

=item --host=<hostname>

Specify the host on which the PostgreSQL database resides (default=F<localhost>)

=item --debug

Add the SQL submitted to the database to the output

=item --dlm=<delimiter>

Specify the delimiter in the output dataset (default=F<,>)

=item --list-projects

Display the projects available in the database instead of the usual table.  The --dlm, --modtype,
--target, --perfstats, --sampleid, --project, --grove, --sortby, --sessflds, --list-groves, and
--list-targets options are ignored.

=item --list-groves

Display the groves available in the database associated with the given project, instead of the usual
table.  The --dlm, --modtype, --target, --perfstats, --grove, --sortby, --sessflds and --list-targets
options are ignored.

=item --list-targets

For each grove specified, list the name(s) of the target field(s).  If the --grove option is
specified, then only the field name is displayed.  Otherwise, both the grove and field names are
displayed.  The --dlm, --modtype, --target, --perfstats, --sortby, --sampleid, and --sessflds
options are ignored.

=item --modtype=<model types>

Display only models of the specifed type(s).  If more than one is specified, then the list must
be comma-delimited.  By default, display all model types.

=item --password=<database password>

Specify the password for the PostgreSQL account to use (mandatory if remote host specified)

=item --target=<target variable>

Display only models with the specified target variable.

=item --perfstats=<performance stat fields>

Add the specified performance statistic fields to the output dataset.

=item --project=<project name>

Specify a project name on which to filter (default=blank)

=item --sampleid=learn|test|holdout

Specify the sample to use.  By default, all are included

=item --sortby=<field name>

Sort records in descending order of the field selected.  This is intended to provide a convenient way
to rank models based on a particular performance statistic.

=item --user=<username>

Specify the username for the PostgreSQL account to use (mandatory if remote host specified)

=back

=cut

# Module Declarations
use boolean;      # Boolean support for Perl
use Getopt::Long; # Extended processing of command line options
use Pg;           # Perl5 extension for PostgreSQL
use Set::Tiny;    # Unordered set support
use Text::CSV;    # Comma-separated values manipulator

#Subroutine Declarations
sub addopt(\$$$);   # Add option to option string
sub chkflds($\@@);  # Check for existence of requested fields
sub lclist(@);      # Convert input list to lowercase
sub qjoin($@);      # Join the list, but quote the strings
sub sqlexec($$);    # Execute an SQL statement
sub writedb($$);    # Write an SQL statement either to the database engine or STDOUT
sub writelist($$);  # Write a delimmited list to the specified stream
sub writeln($$);    # Write one line of text to the specified stream
sub writeQuery($$); # Write query result to the specified stream

# Set Constants
$BLANK = "";
$COMMA = ",";
$DLM = $COMMA;
@KEYS = ("project", "grove");
$SPACE = " ";

# Set Defaults
$DB = "spm";            # Database name
$DEBUG = false;
$PROJECT = "";          # Optional project name

GetOptions(
  "help" => \$HELP,              # Invoke help
  "db=s" => \$DB,                # Database name
  "debug" => \$DEBUG,            # Invoke debug mode
  "dlm=s" => \$DLM,              # Output delimiter
  "host=s" => \$HOSTNAME,        # Remote hostname
  "user=s" => \$USERNAME,        # username
  "password=s" => \$PASSWORD,    # password
  "modtype=s" => \$MODTYPES,     # List of model types
  "target=s" => \$TARGET,        # Target variable
  "perfstats=s" => \$PERFSTATS,  # List of performance stats
  "project=s" => \$PROJECT,      # Project name
  "grove=s" => \$GROVE,          # Grove name
  "sessflds=s" => \$SESSFLDS,    # Session fields
  "sortby=s" => \$SORTBY,        # Field on which to sort (descending)
  "sampleid=s" => \$SAMPLE,      # Sample ID to select
  "list-projects" => \$LISTPROJ, # List projects
  "list-groves" => \$LISTGRVS,   # List groves
  "list-targets"=> \$LISTTGTS    # List targets
    ) || die;

if ($HELP) {
  exec "perldoc $0\n";
  exit;
}

$ARGC = @ARGV;
if ($ARGC > 0) {
  my $outfile = $ARGV[0];
  open STDOUT, ">", $outfile || die "Failure to open output file $infile\n";
}
if (defined($SAMPLE)) {
  $SAMPLE = lc($SAMPLE);
  if (!($SAMPLE eq "learn" || $SAMPLE eq "test" || $SAMPLE eq "holdout")) {
    die "--sampleid=$SAMPLE not supported\n"}
}
# Time to connect to the database (maybe)
$opt = $BLANK;
&addopt(\$opt, "host", $HOSTNAME);
&addopt(\$opt, "user", $USERNAME);
&addopt(\$opt, "password", $PASSWORD);
&addopt(\$opt, "dbname", $DB);
$dbh = Pg::connectdb($opt);

if ($dbh->status == PGRES_CONNECTION_BAD) {
    my $errmsg = $dbh->errorMessage;
    die "Failure to connect to database $DB: $errmsg\n";
}

if ($LISTPROJ) {
  my $stmt = "select distinct project from perfstats;";
  my $res = &writedb($dbh, $stmt);
  my $nrec = $res->ntuples;
  for (my $i = 0; $i < $nrec; $i++) {
    my @values = $res->fetchrow;
    &writeln(STDOUT, $values[0]);
  }
  exit;
}

if ($LISTGRVS) {
  my $stmt = "select distinct grove from perfstats where project='$PROJECT';";
  if (defined($SAMPLE)) {$stmt=~s/;$/ and sampleid='$SAMPLE';/}
  my $res = &writedb($dbh, $stmt);
  &writeQuery(STDOUT, $res);
  exit;
}

if ($LISTTGTS) {
  my @fldlist = "fieldname";
  my $whereclse = "where project='$PROJECT' and usagetype='predicted'";
  if (defined($GROVE)) {$whereclse .= " and grove = '$GROVE'"}
  else {unshift @fldlist, "grove"}
  my $fldlist = join($DLM, @fldlist);
  my $stmt = "select distinct $fldlist from modvars $whereclse;";
  my $res = &writedb($dbh, $stmt);
  if (!defined($GROVE)) {&writeln($fldlist)}
  &writeQuery(STDOUT, $res);
  exit;
}

@MODTYPES=split($COMMA, $MODTYPES);
@SESSFLDS = split($COMMA, $SESSFLDS);
@PERFSTATS = split($COMMA, $PERFSTATS);
$invar = join($DLM, "grove", "modelid", "modeltype", "npred", "SampleID", @SESSFLDS, @PERFSTATS);

&chkflds($dbh, \@SESSFLDS, session, batsession);
&chkflds($dbh, \@PERFSTATS, perfstats);

$stmt = "with
  predcount as (
    select project, grove, modelid, count(*) as npred
    from modvars
    where usagetype = 'active'
    group by project, grove, modelid),
  tgt as (
    select project, grove, modelid, fieldname as target
    from modvars
    where usagetype = 'predicted'),
  mdata as (
    select project, grove, modelid, target, npred
    from predcount join tgt using (project, grove, modelid)),
  pdata as (
    select *
    from mdata join perfstats using (project, grove, modelid)),
  sess as (
    select *
    from session join batsession using (project, grove))
  select $invar
    from pdata join sess using (project, grove)";
$whrclse = "where ";
$anywhere = false;
if (defined($TARGET)) {
  my $target = lc($TARGET);
  $whrclse .= "lower(target) = '$target'";
  $anywhere = true;
}
if (defined($SORTBY)) {
  my @SORTBY = $SORTBY;
  &chkflds($dbh, \@SORTBY, perfstats);
  if ($anywhere) {$whrclse .= " and "}
  $whrclse .= "$SORTBY is not null";
  $anywhere = true;
}
if (defined($MODTYPES)) {
  my $ntypes = @MODTYPES;
  my $first = true;
  if ($anywhere) {$whrclse .= " and "}
  if ($ntypes > 1) {$whrclse .= "("}
  foreach my $modtype (lclist(@MODTYPES)) {
    if ($first) {$first = false}
    else {$whrclse .= " or "}
    $whrclse .= "ModelType = '$modtype'";
  }
  if ($ntypes > 1) {$whrclse .= ")"}
  $anywhere = true;
}
if (defined($PROJECT)) {
  if ($anywhere) {$whrclse .= " and "}
  $whrclse .= "project = '$PROJECT'";
  $anywhere = true;
}
if (defined($GROVE)) {
  if ($anywhere) {$whrclse .= " and "}
  $whrclse .= "grove = '$GROVE'";
  $anywhere = true;
}
if (defined($SAMPLE)) {
  if ($anywhere) {$whrclse .= " and "}
  $whrclse .= "sampleid = '$SAMPLE'";
  $anywhere = true;
}
if ($anywhere) {$stmt .= "\n  $whrclse"}
if (defined($SORTBY)) {$stmt .= "\n  order by $SORTBY desc"}
$stmt .= ";";

$res = &writedb($dbh, $stmt);
$nfields = $res->nfields;
@fname = ();
for ($i = 0; $i < $nfields; $i++) {push @fname, $res->fname($i)}
$csv = Text::CSV->new({sep_char=>$DLM, eol=>"\n"});
$nrec = $res->ntuples;
$csv->print(STDOUT, \@fname);
for ($i = 0; $i < $nrec; $i++) {
  my @values = $res->fetchrow;
  $csv->print(STDOUT, \@values);
}

sub addopt(\$$$) {
  my ($popt, $optname, $str) = @_;
  if (length($optname) == 0) {die}
  if (length($str) == 0) {return}
  if (length($$popt) > 0) {$$popt .= $SPACE}
  if ($optname eq "password") {$str = "'$str'"}
  $$popt .= "$optname=$str";
}

sub lclist(@) {
  my @outlist = ();
  foreach my $str (@_) {push @outlist, lc($str)}
  return @outlist;
}

sub chkflds($\@@) {
  my ($dbh, $pfld, @tables) = @_;
  my $nfields = @$pfld;
  if ($nfields == 0) {return}
  my $fields = &qjoin($COMMA, @$pfld);
  my $qtables = &qjoin($COMMA, @tables);
  my $tables = join($COMMA, @tables);
  my $stmt = "select column_name from information_schema.columns where table_name in ($qtables);";
  my $res = &writedb($dbh, $stmt);
  my $nxfields = $res->ntuples;
  my @xfields = ();
  for (my $i = 0; $i < $nxfields; $i++) {
    my $name = $res->getvalue($i, 0);
    push @xfields, $name;
  }
  my $xfields = Set::Tiny->new(&lclist(@xfields));
  foreach my $field (&lclist(@$pfld)) {
    if (!$xfields->has($field)) {die "Field $field not present in $tables\n"}
  }
}

sub qjoin($@) {
  my ($dlm, @list) = @_;
  my @qlist = ();
  foreach my $item (@list) {
    push @qlist, "'$item'";
  }
  return join($dlm, @qlist);
}

sub writedb($$) {
  my ($dbh, $stmt) = @_;
  my $res = $dbh->exec($stmt);
  my $status = $res->resultStatus;
  my $error = "";
  if ($status == PGRES_BAD_RESPONSE) {$error = "Bad response"}
  elsif ($status == PGRES_NONFATAL_ERROR) {$error = "Nonfatal error"}
  elsif ($status == PGRES_FATAL_ERROR) {$error = "Fatal error"}
  if ($DEBUG) {&writeln(STDOUT, $stmt)}
  if (length($error) > 0) {
    my $mess = $dbh->errorMessage;
    die "$mess\n";
  }
  return $res;
}

sub writelist($$) {
  my ($fh, @list) = @_;
  &writeln($fh, join($DLM, @list));
}

sub writeln($$) {
  my ($fh, $line) = @_;
  print $fh "$line\n";
}

sub writeQuery($$) {
  my ($fh, $qres) = @_;
  my $nrec = $qres->ntuples;
  for (my $i = 0; $i < $nrec; $i++) {
    my @values = $qres->fetchrow;
    &writelist(STDOUT, @values);
  }
}
